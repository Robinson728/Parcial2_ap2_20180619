@page "/cCobros"

@inject IToastService toast  
@inject NavigationManager Nav
@inject IJSRuntime Confirmation    

<EditForm Model="cobros">
    <DataAnnotationsValidator />
    <div class="card">

        <div class="card-header bg-info">
            <h2>Consulta de Cobros</h2>
        </div>

        <div class="card-body">
            <div class="form-group">
                <label>Filtrar por</label>
                <div class="input-group-append">
                    <InputSelect @bind-Value="filtro" class="form-control col-2">
                        <option value="0">Todo</option>
                        <option value="1">Cobro Id</option>
                        <option value="2">Cliente Id</option>
                        <option value="3">Totales</option>
                        <option value="4">Cobrado</option>
                        <option value="5">Observaciones</option>
                    </InputSelect>
                    <InputText @bind-Value="criterio" class="form-control col-8" placeholder="Criterio" />
                    <button type="button" class="btn btn-primary col-1" @onclick="Buscar"><i class="oi oi-magnifying-glass mr-2" />Buscar</button>
                    <button type="button" class="btn btn-success col-1" @onclick="Nuevo"><i class="oi oi-file mr-2" />Nuevo</button>
                </div>
            </div>
            <div class="table-responsive text-nowrap" style="position:relative; height:200px; overflow: auto; display:block;">
                <table class="table table-striped">
                    <thead class="bg-info">
                        <tr>
                            <th>Cobro Id</th>
                            <th>Cliente</th>
                            <th>Fecha</th>
                            <th>Totales</th>
                            <th>Cobrado</th>
                            <th>Observaciones</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var item in cobros)
                        {
                            <tr>
                                <td>@item.CobroId</td>
                                <td>@GetDescripcion(item.ClienteId)</td>
                                <td>@item.Fecha</td>
                                <td>@item.Totales</td>
                                <td>@item.Cobrado</td>
                                <td>@item.Observaciones</td>
                                <td>
                                    <button class="btn btn-info" @onclick="() => Editar(item.CobroId)" ><i class="oi oi-eye" aria-hidden="true"/></button>
                                    <button class="btn btn-danger" @onclick="() => Eliminar(item.CobroId)" aria-hidden="true"><i class="oi oi-trash"/></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

    </div>
</EditForm>

@code {
    public List<Cobros> cobros = new List<Cobros>();

    private int filtro;
    private string criterio;

    protected override void OnInitialized()
    {
        cobros = CobrosBLL.GetList(e => true);
    }

    public string GetDescripcion(int id)
    {
        Clientes clientes = new Clientes();

        clientes = ClientesBLL.Buscar(id);

        return clientes.Nombres;
    }

    public void Nuevo()
    {
        cobros = new List<Cobros>();
        filtro = 0;
        criterio = string.Empty;
    }

    public void Editar(int id)
    {
        Nav.NavigateTo($"/rCobros/{id}");
    }

    public void Buscar()
    {
        cobros = new List<Cobros>();

        if (criterio.Length > 0)
        {
            switch (filtro)
            {
                case 0://Todo
                    cobros = CobrosBLL.GetList(e => true);
                    break;
                case 1://CobroId
                    cobros = CobrosBLL.GetList(e => e.CobroId == Conversiones.ToInt(criterio));
                    break;
                case 2://ClienteId
                    cobros = CobrosBLL.GetList(e => e.ClienteId == Conversiones.ToInt(criterio));
                    break;
                case 3://Totales
                    cobros = CobrosBLL.GetList(e => e.Totales == Conversiones.ToDouble(criterio));
                    break;
                case 4://Cobrado
                    cobros = CobrosBLL.GetList(e => e.Cobrado == Conversiones.ToDouble(criterio));
                    break;
                case 5://Observaciones
                    cobros = CobrosBLL.GetList(e => e.Observaciones.Contains(criterio));
                    break;
                default:
                    break;
            }
        }
        else
            cobros = CobrosBLL.GetList(e => true);
    }


    public void Eliminar(int id)
    {
        var eliminado = CobrosBLL.Eliminar(id);

        if (eliminado)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado Correctamente.");
        }
        else
            toast.ShowError("No fue posible eliminar.");
    }
}